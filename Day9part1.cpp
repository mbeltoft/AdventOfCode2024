#include <string>
#include <iostream>
#include <sstream>
#include <vector>

int main()
{
    bool visualize = false;
    std::string test_input = "2333133121414131402";
    std::stringstream input_ss;
    input_ss << "71801458638945906735378792713148808529464534303257235953879467313711717150491468856122209261207385896183975671231950194924687678691171917729439486819895574093244321633593327172935116817265681572112140764565447177603682105319446822648578807287682497737034738779185183685069705816147880981059755959619420909137449219183342146296882694398483113851508067781735697165459641513982403961745955427740627924934097253274731368605917711485548342404241302393105785655468355170716493532992381630836694831517116872818446702129743153322499266253929742915388972293121997847987896160268026186353992980494210501076287610404897188660933931156645513016353265852181697592955056819114116028655310134553525962751332466897756317682493289727305220851282877193194811506876747268397980525173167477943694148838848028248056994232904424932724561734284692594194148218989337166251104394785885617952375568246149602296608185951420955431834848689874402957159180878325406744599112661621854158987187318499372827965238191186351587422490881017134468896662101113377942931533716622395235126952101067985161421379275617444174471290323363452163431961519574486139814728771617452885666518972780776460548375715435925393763339453034169937891384335711843154416957787475218110359227309381706833362512374038391556496397382775153860237469162277251632883493899665505324625542465397679594583922108963874411769115964697677743693833397272976198532343595740869240423089263235247017308947307627828039792462107389318730129621384882639415109622373233755686216110628729592247512097154267336935955689652477224371898595571064261015703792123168206267367742582628343740327931435642467460341746704289991861351126317358607659818268121546487296625018908524886449365653681775526484961377713568754655932930752359452752215915155966123666975845101060275754748441604576526148691064379865749769939778893641938781705054941691427920745120127935732120776477921872694950258231882631877266658492572089387247284312466578426353865382787038954183263447407336636581532617273644798952";
    input_ss << "72946897179084241785649718588534336316581572426958538165121490982329625760157145198931547871333226674977583778218995505895471231101843754841321244932450589917939132712256455794656657309754922662477978888281153741189353446549316545993736586537755440916080878889182055294725849066399940419425726234953256705237494630802130302728671863659922913268467471535782303455775480555817389071187757289920185087737059515068482780815890506687489458888643108627683712942193672940128887275114533349511847917466239750452580833035287435163526594847182230856218765945893050958164424632128969521299458620684445927630432129199711957334124926802626326560957445461797398030584431751441753852187428417740818863793911481061383179983847992871977296361871928546405125309243912127399899451587229185339596639338335019579930724848885562793355454159927655665466954673232729631790713210952321728853826919313671741848722249742412439380785478273899569369611662418360622650643814126627624267505250327648488365312782111922889143699727319476794583169139681560797492327723494629937195536890446972913973629339556283238849372578503850723883965314151776566093406389325722448710369413925186586285128122875054934632483873362995933683404328984385222967416741577814483335169897466347618342187324583574971595974357124181513582822187102155192723536713726539289986122591431191909315167823847644231241319150117521285316353625886034317341271748474648151485194842714678276761595769194865304494882611902591454029646012268333463169639710184721191555452230609871929450944020827489608237581435353923383987176569704865969346732063311848229459128367259838114676989128448730807037775719125759385092194818609123228589998421658624874436939196387276213197941987368432885245711854342539467578466317625444557121873055489210311556515195643145465627218257402479509769102760601830697090211591379187574155445474265020889474177213268862808876479773631622602186124215192610338398617514346845479118195892888428646954655085199265589954127685612626168691848539665280605384";
    input_ss << "74242050573271328717548384178625643341414395116278573111649465483563505850645267391424512026794979515955976169226173533753642144819722208153244696629618657494401429767086554940317789997048806265822444453240547264513112761667643060123873901217832021228957663923353924401889755824691499424710384931444387122112995555586842675118171887523689258462819699515467696679736460188580826663468461281499206992963833467349727548331068193232542666869323718526791033255274641844155273385520453581576016899257838544577662175639615471691424246560841645604666927449228689621016753348285284929558243198363531677668673142865673593539786393684920138998755362726019972512244077191218208656774811533730453715748825448815625491355241413827473420559647681198925465238733516714979699353448171028375679856637135249487884114293889545742923849384332761659811706848549777853295549832301739555912723327548314197465807964891718762131156072776964803518423340658143558989178284316948187576236417435722489055705033634636367647558829524155567580564745364013831662492029239253751378307977806277195363269093487626567332238059721317862392371854532741712171869980607359214426913948475446437571468011422761777567951014315861341367291583872486574922743896901426334530582562537715562069186666818114209331956031197146806570227158656941704520165876438098519328736940827732996434344239826615543021472339647615699079277772454911262849139445466970544442585251359846478776692722239392378023959053958739537953886393443086772239249441188887842097264839627698188452908141345165631410916289704091139123751182155868294410636990393939593890798475111781342719266860938960757252213561411712108239496065426523855619224954315017411272395987769476802948528337497255966947849042714331861568398888271155505545676328688812857429993668477575158371416084871484544097721851201881468527143070463648591726563018411637694068264299635447718819697683766877912265918864372022844794577980506422841774754275483583561544411329477721617689527762439459824341257439743339191758";
    input_ss << "40509828393770555786306488257888564528925335354141316594348141465191471173465099629326937712494963517086137189521659707481891657561343946885847755376298344433855737933964228312485997989081448375476645116559308210759781918588188135583197556050582681765794578136263756705681806917419873189890844780733754683411624175328445777292214037432685583357175741984963983838624242805454585344487180972864382718502768976982653558355969375821197663213672867511938553601137169494541071152857747075846180376492395624535857639958379461871547444044815278935111515714559850359450455560309844777880242843994624484963857542945183569334508138578325911724811657814418694352309867946448104297459812486881143389931681166692724814178637461457529091694842365852667342957568896245932426384849322921626217301254682230399148768118978115648213576631679665997697972644364455192191308218811295407668213784503666919741692156787923483177858060227492453636491618952692542539154978628625547182379598851361624797652985279082876148787267272150274033353998191255923760935451663697835376912166344929318147409342159062263139819239575998886779885181137118388765476463116035702772419970703023422030428424186450228290997060103370399772513866834599529351692744569198783941473924979762767292126890891467423258284393287384243967752779821235126636307528676039829041352156637552277796801043918337305661257631836895712979784466216878797923601224643632432462697574475426798351859094602276475937745388753429339020708993802424433268565660393596208442793166679978997896106460482172249492148044719021722782822559704979994360587987396478481023802053996048549069434445306191478270359134818542795442621853493599198727436917579515329281408541358552722575173950219697939752558934914429328758785685139182304518377217897227301281915675232179153034136512616882577570312175488060664592983618655960297841429043962790378737826321796397989835419689715863911792748065385320975260683122873366479056571854679638376932263595817065769954896793142463439136585338865964412746";
    input_ss << "35926897966266686424653948534744572777662921658892886519139629456424866147932368842980911032798517375461869996654518347610701116593163411353204739681784473297632225666868233744411837268978666587681293201032427844988555439815339669646467346261394217195034435873815177321562584426533443205494119517598843741647708942509279576274595653326149945729362326186687441876665738547623865091178669559212106067901489147458108276773373115667343298315241322829253840817720608053131895802236591695856798361183207237617288542866481933439830156986817278557763446668932030215739601095426413916794948226289868706742698617815165461925733714205875794515978069993298692183778110687454636341542747272190367558181132579413363697808643996317251322144931265929335687751146462433984324103688562446145347488559992084492353726982611150635650691869638089511255805694527225893726774871428783723978118526749012527261411273453225518945598372565697242291944398576443601289678313305435585880513265907427743613409352733130316820364340412879384928796142486339904854494179179923462950357080476027895789179021334886938734115623151341666554658511887145192443526821348787231157812267725889855274117994699195574123412032137813891937411543796258259148941938523275836088708385209557363345363811636052543053682791843046211131197150761969977147215232437510773753585045775271284760209235433719151692136669737717911080229332783398948754474075506889482579992547848588982011215098228765781756187484329373277716247918227463868872821136443040851333309046476884933981501313738512148169582814842811491923911456231073858677831348707187166569249628783949535714301349665883432496721745511632681843584822945298873771654913641610982555933767275967103451576919831912269236452487294098222975215427414978401539794354618411842713929891434150733834722382674052334512976535425494301885864932565542269662262826628973885565834360579029327576989029918540982222396915988291663092982917921927791422877481931370255730654196396430933381845372627277651541702293425074967462";
    input_ss << "19904640647354198513885147608263389483372485849714213976562673104459938656605757615061416947428890312726602737867498347157862315318932621312135162316193598585841365265475459184851086847524953794898675857088943358732695571776507638525653977368875420825659157138392996918710765823731923279441576081729961328435589223757067196017603292885299442741735718848677908752257544991486381123146735187674154237159196873887456191392246149785372116159559223249267626749282501692541372455781668324482585895288701494302744178562556927398335328774164517528115204036192048205241208696898743544372355718428546887833574076173091284315282373977522274186361527546948504172272729722438313764837199528938359721867346643358347259164923198926749255538722583293851216955076522284295795241329799637447340949382471266974363753932781295104498417412767877466587583643313813494867121420828155407243562652951234828033992413993924375214133266261924304839902226105282112381916030454413415315453132786990509823968557552798171171939185309623285879482633309296341741768796766157556657989239787767268073369473595882391764489359283914893866399526513257955189179644936784459593717073146871551490466758923412584027643998485995413778759244307566175749444755512577589544342268671139611463808252591351814625693172342241183763425566942048142147196789539940313194581491341635224157909513135654692820919357236989379182118053703565273462938339356058759174168996349322546190771170245848613785464971563925534793683956929074477580184132104036203138261677327312396841217553962183287959699588977912575080225156636781534118105142206474738845785146493396858475402795515539503337869774315066474884412768544186203444669421429873718444361347908535746575702013403337319865644623365689253871942410687967658037294912437163854739311089678218337421519865736992443273602989608448981471944190885624874498154195701459663266471147624285781531644847455627767337987581512487461147553048857878512985619845551613117281507875626150268828196819905612764666698167621495193937";
    input_ss << "27907848707997401965205818816494666044646469351280938647128422918667677970661939136634236098917092939374814319236587195092538917556588583056278636359583995743548761163414256821546617729998962336417544268816614047264068793764803416402939249363951822581893412928525040919419998321507918883318507159364824204371915372406283117673929331648623405216113012596310228215986377994253935898329149586627466782689016718962869020517529802371883356822090849291408118409888359186294088978850997842398862553363659590159615391762489749906863405730329489854340823147625317399566919863316029265058695999469475573244632777108635801488502699494216758537888879545145559839806680252833401814884386935957321647941962706315659147532882471211743548513387712338481270843913615392857862606985764351767713226972506298464972978618812180649829379393888641201120214631782028332442369174546027701169906591101621474934348471237320503579122176777281206677452283874736544840161040667950323217437435798295482693956346921735317810971580328273844923194596874855918419309632555717475265933213488960976881593792358158115862599410173293359770425286992849953715388679672689147187897240296668233960789594382539329479348040265075788614141463749712172077488650572688781286143378846943651961414997953971484173819118955681473032578420762383552959118199214212428064773633695359403192808118495031312627159657665925856720141698904438779790329070356515593261865393924442673395707158659356164630654499147488563691402476553443506689289399472776413767865145404012723695616093514122449763844180132532448911956416701232884349607058936557674481869784631538804713299496171472972237674410191048331444717534691576713879178780163860111861596059846852916016346546817970425975104079485244527547255231836117811091139892546887876422774970175079807033355420867933218092147478939227834432668230261747196967315712396426753550253053872690471576435452632485961063934885452524531755819020617757406477883870337115309186492153397185826568988184294542437299125759572627752811";
    input_ss << "22165372761415111841713140249226901072862927229316959132944251896850316171907945643861466266422446682243689878756361213725952520391470595154668296104017923683681087817977928028671847697835469635322015475055107234622790553627756085442840669518747937243889239169961149795155267636589084367632782585573982205394465777268184238747673042288519415780694128992094782072546510608032145232974093142460101429473717164393194587569689255668353047467853785370788552795635557091454070571125773492911543885092109388378639391023669034966778665931844924989444733247661453961145644082452946202617232855272432774671158080465833542582749936969623503986826678971045323730174446554460419059962681917665696780352360166863361212648118214062333785537965806525193994206254667192788956548616141775718868475620759025695793826393116314862322205696662468258567713074531782309962185490205464904698814177556545145150319640621250775884519825947761925253188511419869856360416579696684708546541872461522655447785259354857281449549285457243864353197519568716674784401620466330831121831037969710654925684181917822751992555817546163594182787084574034126199333570191435895590193558622597383038925673826454343977435258666166192658848067445515965671699888426725378011987028777496916672117699392391182966141531775857326545124553485978591529672729979610408316845464545240299833501895542025487139441679831177258263418587936451149931523314794123567216716093381925125372147587609248388621344092509635918295483694408557966426116118853016856347488244591779565838205673727942956382211078137870617113259911615995434265839473273125127235121445288779212228549447661375558492614360964652621935749155621331304028191071876358996850649499304719893933946826358382232131806568487686273050909647771263619987929519489246727076826259403650316215196337936669882966537828648528494913187567694028326211379776625858816318467491549418191253544753233775487891179164684373818732126431133395743647127382932153468998501586294493712526485326887757456734361249454834548877";
    input_ss << "87199260548695509267831512244769882485186450783053253718575664519852456488669572814444796556366594649734252682132038252960551160741933323027626779129438401379421390184683758611601429805467852935247071346632647217507278888852563569574544496591693127258311219740548610499694493048773081945299394424666324167127764189727087915067365334626925194126834634369456783894425767706560314023805062855313985263761052643250979649743015562499478479199051818155766969564474546013994389305836787787185886654673133295986734433819869773232345262661295866812163167188869188215346786592505032331160902489623355592794233112272383485678196158929466249453823999719616197335793941462723259665397767533317708482941691468475383561525630386037341670414071757146733156422131253892699461764713219889215078953640837574322860526628686413157589808376374647723218365644939662335333798580496358583679936281328237773982991128675236829979716940815088954150822167119754606876324498119141185032762581988181262959562145497043377760612740937169843165132968192829893990364572245388998856177641991665942140148821381477843091871776281186809936571375702765513444769339961441333972142896912094546817308189609531168224263253949850175252904738237456975257659116752666271392286836841048936932314591823579403914631828418215384311666697644073334216132632406737513664331934407211726090681291837160984282464894618853586195585788444220166598775567284480913638738586326947981270861794903460649519642840349968767165735717679090177189906095622037699754282131885867196277716020179454378349444821801314163576728384873211485196178474532710856012843949285424828050247266109438247928739855911295411517995636923851804682803118185446377311318812114124271028505714451638742469315663681321465546406830859732181675123024591356218059404548727765198264681076133152865937273245812824936449773168552489572273236390579010635870458143638113595660306715791769923454643557832812492246799932984277735850196910386722833889956533918489409434443445112686257073572590457856407665";
    input_ss << "7248364641889281109754163364826724393754189739743415728225131142236050598241321374605036715811848749494427265043747015739144485535873311907565623549648284659693762118927320268562907746295551291112516875689134134077265792993448491199263276701694635387476371141796287281329159845412744993984678693331218945512121901842557411683650847187362743413977943847342840381695568966594193444281161889289695607185337290906640627775734387514073209057659739377885488652338642977675579623478367275943149856997080327516179572391975709912193764686266424328309524872536823569766929149699796867574432641617925945997143302776258687634862818375474234813137621329319774753752485597693651165322745857221884107749365060461360857977909453104581747765216394741322749695705155361799227948299470506663687412104591464862496694606744634320488290136528446449427156713385529295456021525433936744601615199987784932315197165797724596453581186758983245427739594436272826703169569013122998492289684162811371622878186478696296626333597834391656978195885924569067357359884326132240828218886669212830947361353134214645424532833280115762299637519596691773259141925599398348762178423196675162145772675199853178645783428955259698578420556320786623189976817652437972994283918098877270765093499158963581437748731828943651213894121024816542827673427237965511412179906292988123845140981839968879806983797434809527203288745468207622795872777212871840627746113038489262877083743450707475402926431645716912335580589117566176935780607917436835796686105579893973108148984363476847679817973555927415526184672282906986595442512880525916158948808347119762812240909014128499633258554884188645389690793196387677699911497094244629651266918735178688317921822685296492326374782856161028306341533830891395443923222121331073745229268640717845572181404643539193886317634876314616687483169556584711492439317213104734277472748672153763231986922721374537962122771393468050767945428419557465627778816617413780378411292739218577126522639657922672306453112830967439418";
    //input_ss << test_input;

    input_ss.seekg(0, std::ios::end);
    size_t size = input_ss.tellg();
    input_ss.seekg(0, std::ios::beg);
    std::cout << "Input length: " << size << std::endl;

    // Convert file/free layout to disk layout
    size_t pos = 0;
    bool file_mode = true;
    int64_t idx = 0;
    std::vector<int64_t> disk;
    while (pos < size) {
        char input = 0;
        input_ss.get(input);
        int size = input - 0x30; // ASCII number to decimal
        for (int i = 0; i < size; i++) {
            if (file_mode) {
                disk.push_back(idx);
            } else {
                disk.push_back(-1);
            }
        }
        if (file_mode) {
            idx++;
        }
        file_mode = !file_mode;
        pos++;
    }

    // Convert vector to stringstream for visualization
    if (visualize) {
        std::stringstream before_ss;
        for (auto content : disk) {
            if (content == -1) {
                before_ss << '.';
            } else {
                before_ss << content;
            }
        }
        std::string before_disklayout = before_ss.str();
        std::cout << "Disk layout: <" << before_disklayout << ">" << std::endl;
    }
    //if (disklayout != "00...111...2...333.44.5555.6666.777.888899") {
    //    std::cerr << "Incorrect disk layout";
    //    exit(0);
    //}

    // Rearrange disk
#if 0
    size_t target = 0;
    size_t source = disklayout.size() - 1;
    while (source > target && target < disklayout.size() && source > 0) {
        // Advance target to first free space
        while (disklayout[target] != '.') {
            target++;
            if (target >= disklayout.size()) {
                break;
            }
        }
        //std::cout << "target: " << target << std::endl;
        // Retard source to last file part to move
        while (disklayout[source] == '.') {
            source--;
            if (source < 0) {
                break;
            }
        }
        //std::cout << "source: " << source << std::endl;
        //std::cout << "Moving " << source << "[" << disklayout[source] << "] to " << target << "[" << disklayout[target] << "]" << std::endl;
        disklayout[target] = disklayout[source];
        disklayout[source] = '.';
        target++;
        source--;
    }
#else
    std::cout << "Disk size: " << disk.size() << std::endl;
    size_t target = 0;
    size_t source = disk.size() - 1;
    bool valid = true;
    while (source > target && target < disk.size() && source > 0) {
        // Advance target to first free space
        while (disk[target] != -1) {
            target++;
            if (target >= disk.size()) {
                valid = false;
                break;
            }
        }
        if (valid) {
            //std::cout << "Free target at: " << target << std::endl;
            // Retard source to last file part to move
            while (disk[source] == -1) {
                source--;
                if (source < 0) {
                    valid = false;
                    break;
                }
            }
            if (valid && source > target) {
                //std::cout << "Source at: " << source << std::endl;
                //std::cout << "Moving " << source << "[" << disklayout[source] << "] to " << target << "[" << disklayout[target] << "]" << std::endl;
                disk[target] = disk[source];
                disk[source] = -1;
                target++;
                source--;
            }
        }
    }
#endif

    // Convert vector to stringstream for visualization
    if (visualize) {
        std::stringstream after_ss;
        for (auto content : disk) {
            if (content == -1) {
                after_ss << '.';
            } else {
                after_ss << content;
            }
        }
        std::string after_disklayout = after_ss.str();
        std::cout << "Disk layout after: <" << after_disklayout << ">" << std::endl;
    }
    //std::cout << "Disk layout after rearranging: <" << disklayout << ">" << std::endl;
    //if (disklayout != "0099811188827773336446555566..............") {
    //    std::cerr << "Incorrect disk layout after rearranging";
    //    exit(0);
    //}

    uint64_t checksum = 0;
    for (int i = 0; i < disk.size(); i++) {
        if (disk[i] != -1) {
            checksum += i * disk[i];
        }
    }
    std::cout << "Checksum: " << checksum << std::endl;
    // 1928 - test input
    // 6463499258318

    return 0;
}